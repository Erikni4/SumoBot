// RIGHT ENGINE = C
// LEFT ENGINE = B
// TOP ENGINE = A

// TODO
//Endast en Precedes i programmet?
//Alternativa funktioner till readsensorcolorex
//Se över avstånd US ska reagera på
//Hur länge ska plogen höjas upp efter att touchsensorerna triggas?

task UseSensors ();
task moveToFindOpponent ();
int checkSensors ();
int searchForBlackLine ();





// RIGHT ENGINE =C
// LEFT ENGINE = B
// TOP ENGINE = A

void fullSpeedForward();
void lift();

mutex moveMutex; //JA DET ÄR EN GLOBAL VARIABEL! SO WHAT?!

task main()
{
     SetSensor(IN_2, SENSOR_TOUCH); // Port 1, touch sensor
     SetSensor(IN_1, SENSOR_TOUCH);
     SetSensorLowspeed(IN_4);       //Ultraljud, varför används inte SetSensorUltrasonic(IN_4); ???
     SetSensorColorFull(IN_3);      //Färgsensorn

     //Roboten ska vara inaktiv i 3 sec
     Precedes(moveToFindOpponent, UseSensors);

} // End task main



task UseSensors ()
{
    int val;
    long t1;
    t1=CurrentTick();


    while(true)
    {
         val=checkSensors();

         if (val==1)
         {
              RotateMotor(OUT_A, 100, 10);  //Plogen höjs
              until (CurrentTick()-t1 > 1000 ); //Hur länge ska plogen hållas uppe?
              RotateMotor(OUT_A, 100, -10);
         }
         else if(val==2)
         {
              Acquire(moveMutex);
              fullSpeedForward();
              //Eriks funktion för att attackera, plogen osv

              Off(OUT_BC); //US triggas: kommando för att få roboten att stanna, Off(OUT_BC)??
              //Roboten står nu rakt mot motståndaren(?)

              while (SensorUS(IN_4)<50) //Vilket avstånd vill vi använda?
              {
                   OnFwd(OUT_BC, 100);
              }
              Release(moveMutex);
         }
         else if(val==3)
         {
              Acquire(moveMutex);
              //Funktion för att röra sig bort från svarta linjen
              OnRevReg(OUT_BC,100,OUT_REGMODE_SYNC);
              until (((CurrentTick()-t1) > 1000)); //Kör framåt i 1 sek
              Acquire(moveMutex);
         }
    }
}

task moveToFindOpponent ()
{


}

void fullSpeedForward()  // function av Erik
{

  bool foundEnemy=true;

  while(foundEnemy)
  {

        //the ultrasonic sensor needs time to read the values
        //that is why we have the 500 millisecond wait
        //
        Wait(500);
        if(SensorUS(IN_4) < 30)
        {
            OnFwd(OUT_BC, 100);
            Wait(500);
            RotateMotor(OUT_A,10,30);
            Wait(200);
            lift();
        }
        else if(SensorUS(IN_4) < 250)
        {
            OnFwd(OUT_BC, 100);
            Wait(500);
            RotateMotor(OUT_A,-10,30);
            Wait(200);
        }
        else
        {
            OnFwd(OUT_BC, 100);
            foundEnemy=false;
        }
  }
}

void lift()  // Funktion av Erik,
{
   if(SENSOR_1 == 1 || SENSOR_2 == 1)
          {
                RotateMotor(OUT_A, 100, -15);
                Wait(5000);
          }
}

int checkSensors ()
{
   int triggedSensor=0, val=0;



     if (SENSOR_1 || SENSOR_2)
     {
        triggedSensor=1;
     }
     else if (SensorUS(IN_4)<50) //Vilket avstånd vill vi använda?
     {
        triggedSensor=2;
     }
     else if (searchForBlackLine())
     {
        triggedSensor=3;
     }

     switch(triggedSensor)
     {
        case 1: //SENSOR_1 eller 2 triggas:
             val=1;
             break;
        case 2: //SensorUS(IN_4) triggas:
             val=2;
             break;
        case 3: //searchForBlackLine() triggas:
             val=3;
             break;
        default:
             val=0;
     }


     return val;
}

int searchForBlackLine ()
{
     int val, colorValue, r[], n[], s[];
     string colorName;

     ReadSensorColorEx(S3, colorValue, r, n, s);


     switch(colorValue)
     {
        case INPUT_BLACKCOLOR:
            colorName = "Black";
            break;
        case INPUT_BLUECOLOR:
            colorName = "Blue";
            break;
        case INPUT_GREENCOLOR:
            colorName = "Green";
            break;
        case INPUT_REDCOLOR:
            colorName = "Yellow";
            break;
        case INPUT_WHITECOLOR:
            colorName = "White";
            break;
        default:
            colorName = "Unknown";
     }

     if (strcmp(colorName, "Black")==0)
     {
          val=1;
     }
     else
     {
          val=0;
     }


     return val;
}
