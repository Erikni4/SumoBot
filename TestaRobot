#define POWER 60
#define MAXPOWER 100

// RIGHT ENGINE = C
// LEFT ENGINE = B
// TOP ENGINE = A

int searchForBlackLine ();
//void findOpponent ();
void moveFwd ();
task turn90LeftE ();
task turn90RightE ();
task turnMin90LeftE ();
task turnMin90RightE ();
void TriggeredTouchSensor ();
task Rotate360RightE ();
task Rotate360LeftE ();
task findOpponent ();
task moveWhileSearch ();
task searchOpponent ();

// TODO
// switch-sats som använder alla sensorerna


task main()
{

     int blackLineFound=0;

     SetSensor(IN_2, SENSOR_TOUCH); // Port 1, touch sensor
     SetSensor(IN_1, SENSOR_TOUCH);
     SetSensorLowspeed(IN_4);       //Ultraljud
     SetSensorColorFull(IN_3);      //Färgsensorn



       Precedes(findOpponent, moveWhileSearch); //En funktion kontrollerar US, en rör roboten

       //RotateMotor(OUT_A, 10, 10);
       //RotateMotor(OUT_A, 10, -10);
        while(blackLineFound!=1)
        {
          blackLineFound=searchForBlackLine();
           if(blackLineFound)
           {
                break;
           }
           Precedes(turnMin90LeftE, turnMin90RightE); //Svänger vänster
           Precedes(turn90LeftE, turn90RightE);   //Svänger höger
           Precedes(Rotate360LeftE, Rotate360RightE);
           //TriggeredTouchSensor();
           //moveFwd();
        }
     if (blackLineFound)
     {
        OnFwdReg(OUT_BC,100,OUT_REGMODE_SYNC);
        Wait(1000);
     }

} // End task main


int searchForBlackLine ()
{
     int val, colorValue, r[], n[], s[];
     string colorName;

     ReadSensorColorEx(S3, colorValue, r, n, s);




     switch(colorValue)
     {
        case INPUT_BLACKCOLOR:
            colorName = "Black";
            break;
        case INPUT_BLUECOLOR:
            colorName = "Blue";
            break;
        case INPUT_GREENCOLOR:
            colorName = "Green";
            break;
        case INPUT_REDCOLOR:
            colorName = "Yellow";
            break;
        case INPUT_WHITECOLOR:
            colorName = "White";
            break;
        default:
            colorName = "Unknown";
     }

     if (strcmp(colorName, "Black")==0)
     {
          val=1;
          //RotateMotorEx(OUT_BC, 100, 3700, 100, true, false);
          //Wait(2000);
     }
     else
     {
          val=0;
     }


  return val;
}

task searchOpponent ()
{
     Precedes(findOpponent, moveWhileSearch);
}


task findOpponent ()
{
     while (SensorUS(IN_4)<20)
     OnFwdReg(OUT_BC, 100, OUT_REGMODE_SYNC);

}

task moveWhileSearch ()
{
     Precedes(Rotate360LeftE, Rotate360RightE);

}

/*void findOpponent ()
{
     while (SensorUS(IN_4) !=1) // While soundsensor in port 3 not reacts to sound
     {                          //Kan ändras till tex <15 cm
           int ccontinue=searchForBlackLine(); //Om svart linje hittas returneras 1
           while (ccontinue!=1)
           {

                 Precedes(Rotate360Left, Rotate360Right);
                 OnRev(OUT_AB, 100); //Engine A and B set to reverse


           }

           if (ccontinue)
           {
               OnFwdReg(OUT_BC,100,OUT_REGMODE_SYNC);
               Wait(1000);
           }
     }
} */


task Rotate360LeftE ()
{
   OnRev(OUT_B, 100);
   Wait(2670);
}

task Rotate360RightE ()
{
   OnFwd(OUT_C, 100);
   Wait(2670);
}

void moveFwd ()
{
    OnRevReg(OUT_BC, 100, OUT_REGMODE_SYNC);
    Wait(1000);
    Off(OUT_BC);
}

task turn90LeftE () //Svänger höger
{
    OnFwd(OUT_B, 100);
    Wait(675); //Testa tid för att få rätt sväng
}

task turn90RightE () //Svänger höger
{
     OnFwd(OUT_C, 100);
     Wait(675); //Testa tid för att få rätt sväng
}

task turnMin90LeftE () //Svänger vänster
{
    OnFwd(OUT_B, 100);
    Wait(675); //Testa tid för att få rätt sväng
}

task turnMin90RightE () //Svänger vänster
{
    OnRev(OUT_C, 100);
    Wait(675); //Testa tid för att få rätt sväng
}




void TriggeredTouchSensor ()
{

//while(true)   // ändra till while(true) i task system
     //{
          // Wait until touch sensor pressed
          while(SENSOR_1 || SENSOR_2)   //SENSOR_1 != 1 || SENSOR_2 != 1
          {
                RotateMotor(OUT_A, 100, -15);
          }
     //}

}
